--- /dev/null
+++ b/include/net/nat/hw_nat/frame_engine.h
@@ -0,0 +1,735 @@
+/*
+    Module Name:
+    frame_engine.h
+
+    Abstract:
+
+    Revision History:
+    Who         When            What
+    --------    ----------      ----------------------------------------------
+    Name        Date            Modification logs
+    Steven Liu  2007-01-11      Initial version
+*/
+
+#ifndef _FE_WANTED
+#define _FE_WANTED
+
+#include <linux/version.h>
+#include <asm/rt2880/rt_mmap.h>
+
+/*
+ * DEFINITIONS AND MACROS
+ */
+#define MAC_ARG(x) ((u8*)(x))[0],((u8*)(x))[1],((u8*)(x))[2], \
+                       ((u8*)(x))[3],((u8*)(x))[4],((u8*)(x))[5]
+
+#define IPV6_ADDR(x) ntohs(x[0]),ntohs(x[1]),ntohs(x[2]),ntohs(x[3]),ntohs(x[4]),\
+		     ntohs(x[5]),ntohs(x[6]),ntohs(x[7])
+
+#define IN
+#define OUT
+#define INOUT
+
+#define NAT_DEBUG
+
+#ifdef NAT_DEBUG
+#define NAT_PRINT(fmt, args...) printk(KERN_INFO fmt, ## args)
+#else
+#define NAT_PRINT(fmt, args...) { }
+#endif
+
+#define CHIPID		    RALINK_SYSCTL_BASE + 0x00
+#define REVID		    RALINK_SYSCTL_BASE + 0x0C
+
+
+#if defined (CONFIG_HNAT_V2)
+
+#define PFC		    RALINK_ETH_SW_BASE + 0x0004
+#define TPF0		    RALINK_ETH_SW_BASE + 0x2030
+#define TPF1		    RALINK_ETH_SW_BASE + 0x2130
+#define TPF2		    RALINK_ETH_SW_BASE + 0x2230
+#define TPF3		    RALINK_ETH_SW_BASE + 0x2330
+#define TPF4		    RALINK_ETH_SW_BASE + 0x2430
+#define TPF5		    RALINK_ETH_SW_BASE + 0x2530
+#define TPF6		    RALINK_ETH_SW_BASE + 0x2630
+
+#define PMCR_P7		    RALINK_ETH_SW_BASE + 0x3700
+#define PSC_P7		    RALINK_ETH_SW_BASE + 0x270c
+#define FOE_TS		    RALINK_FRAME_ENGINE_BASE + 0x0010
+
+#define PPE_FQFC_CFG	    RALINK_PPE_BASE + 0x00
+#define PPE_IQ_CFG	    RALINK_PPE_BASE + 0x04
+#define PPE_QUE_STA	    RALINK_PPE_BASE + 0x08
+#define GDM2_FWD_CFG	    RALINK_PPE_BASE + 0x100
+#define GDM2_SHPR_CFG	    RALINK_PPE_BASE + 0x104
+
+#define PPE_GLO_CFG	    RALINK_PPE_BASE + 0x200
+#define PPE_FLOW_CFG	    RALINK_PPE_BASE + 0x204
+#define PPE_FLOW_SET	    PPE_FLOW_CFG
+#define PPE_IP_PROT_CHK	    RALINK_PPE_BASE + 0x208
+#define PPE_IP_PROT_0	    RALINK_PPE_BASE + 0x20C
+#define PPE_IP_PROT_1	    RALINK_PPE_BASE + 0x210
+#define PPE_IP_PROT_2	    RALINK_PPE_BASE + 0x214
+#define PPE_IP_PROT_3	    RALINK_PPE_BASE + 0x218
+#define PPE_TB_CFG	    RALINK_PPE_BASE + 0x21C
+#define PPE_FOE_CFG	    PPE_TB_CFG
+#define PPE_TB_BASE	    RALINK_PPE_BASE + 0x220
+#define PPE_FOE_BASE	    PPE_TB_BASE
+#define PPE_TB_USED	    RALINK_PPE_BASE + 0x224
+#define PPE_BNDR	    RALINK_PPE_BASE + 0x228
+#define PPE_FOE_BNDR	    PPE_BNDR
+#define PPE_BIND_LMT_0	    RALINK_PPE_BASE + 0x22C
+#define PPE_FOE_LMT1	    PPE_BIND_LMT_0
+#define PPE_BIND_LMT_1	    RALINK_PPE_BASE + 0x230
+#define PPE_FOE_LMT2	    PPE_BIND_LMT_1
+#define PPE_KA		    RALINK_PPE_BASE + 0x234
+#define PPE_FOE_KA	    PPE_KA
+#define PPE_UNB_AGE	    RALINK_PPE_BASE + 0x238
+#define PPE_FOE_UNB_AGE	    PPE_UNB_AGE
+#define PPE_BND_AGE_0	    RALINK_PPE_BASE + 0x23C
+#define PPE_FOE_BND_AGE0    PPE_BND_AGE_0
+#define PPE_BND_AGE_1	    RALINK_PPE_BASE + 0x240
+#define PPE_FOE_BND_AGE1    PPE_BND_AGE_1
+#define PPE_HASH_SEED	    RALINK_PPE_BASE + 0x244
+
+#if defined (CONFIG_RALINK_MT7620)
+#define PPE_FP_BMAP_0	    RALINK_PPE_BASE + 0x248
+#define PPE_FP_BMAP_1	    RALINK_PPE_BASE + 0x24C
+#define PPE_FP_BMAP_2	    RALINK_PPE_BASE + 0x250
+#define PPE_FP_BMAP_3	    RALINK_PPE_BASE + 0x254
+#define PPE_FP_BMAP_4	    RALINK_PPE_BASE + 0x258
+#define PPE_FP_BMAP_5	    RALINK_PPE_BASE + 0x25C
+#define PPE_FP_BMAP_6	    RALINK_PPE_BASE + 0x260
+#define PPE_FP_BMAP_7	    RALINK_PPE_BASE + 0x264
+
+#define PPE_TIPV4_0	    RALINK_PPE_BASE + 0x268
+#define PPE_TIPV4_1	    RALINK_PPE_BASE + 0x26C
+#define PPE_TIPV4_2	    RALINK_PPE_BASE + 0x270
+#define PPE_TIPV4_3	    RALINK_PPE_BASE + 0x274
+#define PPE_TIPV4_4	    RALINK_PPE_BASE + 0x278
+#define PPE_TIPV4_5	    RALINK_PPE_BASE + 0x27C
+#define PPE_TIPV4_6	    RALINK_PPE_BASE + 0x280
+#define PPE_TIPV4_7	    RALINK_PPE_BASE + 0x284
+
+#define PPE_TIPV6_127_0	    RALINK_PPE_BASE + 0x288
+#define PPE_TIPV6_95_0	    RALINK_PPE_BASE + 0x28C
+#define PPE_TIPV6_63_0	    RALINK_PPE_BASE + 0x290
+#define PPE_TIPV6_31_0	    RALINK_PPE_BASE + 0x294
+
+#define PPE_TIPV6_127_1	    RALINK_PPE_BASE + 0x298
+#define PPE_TIPV6_95_1	    RALINK_PPE_BASE + 0x29C
+#define PPE_TIPV6_63_1	    RALINK_PPE_BASE + 0x2A0
+#define PPE_TIPV6_31_1	    RALINK_PPE_BASE + 0x2A4
+
+#define PPE_TIPV6_127_2	    RALINK_PPE_BASE + 0x2A8
+#define PPE_TIPV6_95_2	    RALINK_PPE_BASE + 0x2AC
+#define PPE_TIPV6_63_2	    RALINK_PPE_BASE + 0x2B0
+#define PPE_TIPV6_31_2	    RALINK_PPE_BASE + 0x2B4
+
+#define PPE_TIPV6_127_3	    RALINK_PPE_BASE + 0x2B8
+#define PPE_TIPV6_95_3	    RALINK_PPE_BASE + 0x2BC
+#define PPE_TIPV6_63_3	    RALINK_PPE_BASE + 0x2C0
+#define PPE_TIPV6_31_3	    RALINK_PPE_BASE + 0x2C4
+
+#define PPE_TIPV6_127_4	    RALINK_PPE_BASE + 0x2C8
+#define PPE_TIPV6_95_4	    RALINK_PPE_BASE + 0x2CC
+#define PPE_TIPV6_63_4	    RALINK_PPE_BASE + 0x2D0
+#define PPE_TIPV6_31_4	    RALINK_PPE_BASE + 0x2D4
+
+#define PPE_TIPV6_127_5	    RALINK_PPE_BASE + 0x2D8
+#define PPE_TIPV6_95_5	    RALINK_PPE_BASE + 0x2DC
+#define PPE_TIPV6_63_5	    RALINK_PPE_BASE + 0x2E0
+#define PPE_TIPV6_31_5	    RALINK_PPE_BASE + 0x2E4
+
+#define PPE_TIPV6_127_6	    RALINK_PPE_BASE + 0x2E8
+#define PPE_TIPV6_95_6	    RALINK_PPE_BASE + 0x2EC
+#define PPE_TIPV6_63_6	    RALINK_PPE_BASE + 0x2F0
+#define PPE_TIPV6_31_6	    RALINK_PPE_BASE + 0x2F4
+
+#define PPE_TIPV6_127_7	    RALINK_PPE_BASE + 0x2F8
+#define PPE_TIPV6_95_7	    RALINK_PPE_BASE + 0x2FC
+#define PPE_TIPV6_63_7	    RALINK_PPE_BASE + 0x300
+#define PPE_TIPV6_31_7	    RALINK_PPE_BASE + 0x304
+
+#define PPE_MTU_DRP	    RALINK_PPE_BASE + 0x308
+#define PPE_MTU_VLYR_0	    RALINK_PPE_BASE + 0x30C
+#define PPE_MTU_VLYR_1	    RALINK_PPE_BASE + 0x310
+#define PPE_MTU_VLYR_2	    RALINK_PPE_BASE + 0x314
+
+#define PPE_VPM_TPID        RALINK_PPE_BASE + 0x318		
+#define CAH_CTRL	    RALINK_PPE_BASE + 0x320
+#define CAH_TAG_SRH	    RALINK_PPE_BASE + 0x324
+#define CAH_LINE_RW	    RALINK_PPE_BASE + 0x328
+#define CAH_WDATA	    RALINK_PPE_BASE + 0x32C
+#elif defined (CONFIG_RALINK_MT7621)
+#define PPE_DFT_CPORT       RALINK_PPE_BASE + 0x248 
+#define PPE_MCAST_PPSE	    RALINK_PPE_BASE + 0x284
+#define PPE_MCAST_L_0       RALINK_PPE_BASE + 0x288
+#define PPE_MCAST_H_0       RALINK_PPE_BASE + 0x28C
+#define PPE_MCAST_L_1       RALINK_PPE_BASE + 0x290
+#define PPE_MCAST_H_1       RALINK_PPE_BASE + 0x294
+#define PPE_MCAST_L_2       RALINK_PPE_BASE + 0x298
+#define PPE_MCAST_H_2       RALINK_PPE_BASE + 0x29C
+#define PPE_MCAST_L_3       RALINK_PPE_BASE + 0x2A0
+#define PPE_MCAST_H_3       RALINK_PPE_BASE + 0x2A4
+#define PPE_MCAST_L_4       RALINK_PPE_BASE + 0x2A8
+#define PPE_MCAST_H_4       RALINK_PPE_BASE + 0x2AC
+#define PPE_MCAST_L_5       RALINK_PPE_BASE + 0x2B0
+#define PPE_MCAST_H_5       RALINK_PPE_BASE + 0x2B4
+#define PPE_MCAST_L_6       RALINK_PPE_BASE + 0x2BC
+#define PPE_MCAST_H_6       RALINK_PPE_BASE + 0x2C0
+#define PPE_MCAST_L_7       RALINK_PPE_BASE + 0x2C4
+#define PPE_MCAST_H_7       RALINK_PPE_BASE + 0x2C8
+#define PPE_MCAST_L_8       RALINK_PPE_BASE + 0x2CC
+#define PPE_MCAST_H_8       RALINK_PPE_BASE + 0x2D0
+#define PPE_MCAST_L_9       RALINK_PPE_BASE + 0x2D4
+#define PPE_MCAST_H_9       RALINK_PPE_BASE + 0x2D8
+#define PPE_MCAST_L_A       RALINK_PPE_BASE + 0x2DC
+#define PPE_MCAST_H_A       RALINK_PPE_BASE + 0x2E0
+#define PPE_MCAST_L_B       RALINK_PPE_BASE + 0x2E4
+#define PPE_MCAST_H_B       RALINK_PPE_BASE + 0x2E8
+#define PPE_MCAST_L_C       RALINK_PPE_BASE + 0x2EC
+#define PPE_MCAST_H_C       RALINK_PPE_BASE + 0x2F0
+#define PPE_MCAST_L_D       RALINK_PPE_BASE + 0x2F4
+#define PPE_MCAST_H_D       RALINK_PPE_BASE + 0x2F8
+#define PPE_MCAST_L_E       RALINK_PPE_BASE + 0x2FC
+#define PPE_MCAST_H_E       RALINK_PPE_BASE + 0x2E0
+#define PPE_MCAST_L_F       RALINK_PPE_BASE + 0x300
+#define PPE_MCAST_H_F       RALINK_PPE_BASE + 0x304
+#define PPE_MTU_DRP         RALINK_PPE_BASE + 0x308
+#define PPE_MTU_VLYR_0      RALINK_PPE_BASE + 0x30C
+#define PPE_MTU_VLYR_1      RALINK_PPE_BASE + 0x310
+#define PPE_MTU_VLYR_2      RALINK_PPE_BASE + 0x314
+#define PPE_VPM_TPID        RALINK_PPE_BASE + 0x318
+
+#define CAH_CTRL	    RALINK_PPE_BASE + 0x320
+#define CAH_TAG_SRH         RALINK_PPE_BASE + 0x324
+#define CAH_LINE_RW         RALINK_PPE_BASE + 0x328
+#define CAH_WDATA           RALINK_PPE_BASE + 0x32C
+#define CAH_RDATA           RALINK_PPE_BASE + 0x330
+
+#endif // CONFIG_RALINK_MT7620 //
+
+/* 
+ * CAH_RDATA[17:16]
+ *  0: invalid
+ *  1: valid
+ *  2: dirty
+ *  3: lock
+ *
+ * CAH_RDATA[15:0]: entry num 
+ */
+#define CAH_RDATA	    RALINK_PPE_BASE + 0x330
+
+#define GDM1_OFRC_P_CPU     (0 << 0)
+#define GDM1_MFRC_P_CPU     (0 << 4)
+#define GDM1_BFRC_P_CPU     (0 << 8)
+#define GDM1_UFRC_P_CPU     (0 << 12)
+
+/* TO PPE */
+#define IPV4_PPE_MYUC	    (1 << 0) //my mac
+#define IPV4_PPE_MC	    (1 << 1) //multicast
+#define IPV4_PPE_IPM	    (1 << 2) //ip multicast
+#define IPV4_PPE_BC	    (1 << 3) //broadcast
+#define IPV4_PPE_UC	    (1 << 4) //ipv4 learned UC frame
+#define IPV4_PPE_UN	    (1 << 5) //ipv4 unknown  UC frame
+
+#define IPV6_PPE_MYUC	    (1 << 8) //my mac
+#define IPV6_PPE_MC	    (1 << 9) //multicast
+#define IPV6_PPE_IPM	    (1 << 10) //ipv6 multicast
+#define IPV6_PPE_BC	    (1 << 11) //broadcast
+#define IPV6_PPE_UC	    (1 << 12) //ipv6 learned UC frame
+#define IPV6_PPE_UN	    (1 << 13) //ipv6 unknown  UC frame
+
+#if defined(CONFIG_RALINK_MT7621)
+#define AC_BASE		    RALINK_FRAME_ENGINE_BASE + 0x2000
+#define METER_BASE	    RALINK_FRAME_ENGINE_BASE + 0x2000
+
+#define FE_GDMA1_FWD_CFG    RALINK_FRAME_ENGINE_BASE + 0x500
+#define FE_GDMA2_FWD_CFG    RALINK_FRAME_ENGINE_BASE + 0x1500
+
+/* GDMA1 My MAC unicast frame destination port */
+#define GDM1_UFRC_P_CPU     (0 << 12)
+#define GDM1_UFRC_P_PPE     (4 << 12)
+#define GDM1_UFRC_P_QDMA    (5 << 12)
+
+/* GDMA1 broadcast frame MAC address destination port */
+#define GDM1_BFRC_P_CPU     (0 << 8)
+#define GDM1_BFRC_P_PPE     (4 << 8)
+#define GDM1_BFRC_P_QDMA    (5 << 8)
+
+/* GDMA1 multicast frame MAC address destination port */
+#define GDM1_MFRC_P_CPU     (0 << 4)
+#define GDM1_MFRC_P_PPE     (4 << 4)
+#define GDM1_MFRC_P_QDMA    (5 << 4)
+
+/* GDMA1 other MAC address frame destination port */
+#define GDM1_OFRC_P_CPU     (0 << 0)
+#define GDM1_OFRC_P_PPE     (4 << 0)
+#define GDM1_OFRC_P_QDMA    (5 << 0)
+
+#else
+#define AC_BASE		    RALINK_FRAME_ENGINE_BASE + 0x1000
+#define METER_BASE	    RALINK_FRAME_ENGINE_BASE + 0x1200
+
+#define FE_GDMA1_FWD_CFG    RALINK_FRAME_ENGINE_BASE + 0x600
+#endif // CONFIG_RALINK_MT7621 //
+
+
+#else
+#define FE_GLO_BASE         RALINK_FRAME_ENGINE_BASE
+#define PPE_BASE	    RALINK_FRAME_ENGINE_BASE + 0x200
+#define AC_BASE		    RALINK_FRAME_ENGINE_BASE + 0x400
+#define METER_BASE	    RALINK_FRAME_ENGINE_BASE + 0x600
+
+#define FOE_TS		    FE_GLO_BASE+0x1C
+#define GDMA1_BASE          FE_GLO_BASE+0x20
+#define FE_GDMA1_SCH_CFG    GDMA1_BASE+0x04
+#define GDMA2_BASE          FE_GLO_BASE+0x60
+#define FE_GDMA2_SCH_CFG    GDMA2_BASE+0x04
+
+#define PPE_GLO_CFG	    PPE_BASE + 0x00
+#define PPE_STD_GA_H	    PPE_BASE + 0x04
+#define PPE_STD_GA_L	    PPE_BASE + 0x08
+#define PPE_ETD_GA_H	    PPE_BASE + 0x0C
+#define PPE_EXT_GA_L	    PPE_BASE + 0x10
+#define PPE_FLOW_SET	    PPE_BASE + 0x14
+#define PPE_PRE_ACL	    PPE_BASE + 0x18
+#define PPE_PRE_MTR	    PPE_BASE + 0x1C
+#define PPE_PRE_AC	    PPE_BASE + 0x20
+#define PPE_POST_MTR	    PPE_BASE + 0x24
+#define PPE_POST_AC	    PPE_BASE + 0x28
+#define PPE_POL_CFG	    PPE_BASE + 0x2C
+#define PPE_FOE_CFG	    PPE_BASE + 0x30
+#define PPE_FOE_BASE	    PPE_BASE + 0x34
+#define PPE_FOE_USE	    PPE_BASE + 0x38
+#define PPE_FOE_BNDR	    PPE_BASE + 0x3C
+#define PPE_FOE_LMT1	    PPE_BASE + 0x40
+#define PPE_FOE_LMT2	    PPE_BASE + 0x44
+#define PPE_FOE_KA	    PPE_BASE + 0x48
+#define PPE_FOE_UNB_AGE	    PPE_BASE + 0x4C
+#define PPE_FOE_BND_AGE0    PPE_BASE + 0x50
+#define PPE_FOE_BND_AGE1    PPE_BASE + 0x54
+#define CPU_PORT_CFG	    PPE_BASE + 0x58
+#define GE1_PORT_CFG	    PPE_BASE + 0x5C
+#define DSCP0_7_MAP_UP	    PPE_BASE + 0x60
+#define DSCP8_15_MAP_UP	    PPE_BASE + 0x64
+#define DSCP16_23_MAP_UP    PPE_BASE + 0x68
+#define DSCP24_31_MAP_UP    PPE_BASE + 0x6C
+#define DSCP32_39_MAP_UP    PPE_BASE + 0x70
+#define DSCP40_47_MAP_UP    PPE_BASE + 0x74
+#define DSCP48_55_MAP_UP    PPE_BASE + 0x78
+#define DSCP56_63_MAP_UP    PPE_BASE + 0x7C
+#define AUTO_UP_CFG1	    PPE_BASE + 0x80
+#define AUTO_UP_CFG2	    PPE_BASE + 0x84
+#define UP_RES		    PPE_BASE + 0x88
+#define UP_MAP_VPRI	    PPE_BASE + 0x8C
+#define UP0_3_MAP_IDSCP	    PPE_BASE + 0x90
+#define UP4_7_MAP_IDSCP	    PPE_BASE + 0x94
+#define UP0_3_MAP_ODSCP	    PPE_BASE + 0x98
+#define UP4_7_MAP_ODSCP	    PPE_BASE + 0x9C
+#define UP_MAP_AC	    PPE_BASE + 0xA0
+
+#define FE_GDMA1_FWD_CFG    RALINK_FRAME_ENGINE_BASE + 0x20
+#define FE_GDMA2_FWD_CFG    RALINK_FRAME_ENGINE_BASE + 0x60
+
+/* GDMA1 My MAC unicast frame destination port */
+#define GDM1_UFRC_P_CPU     (0 << 12)
+#define GDM1_UFRC_P_GDMA1   (1 << 12)
+#define GDM1_UFRC_P_PPE     (6 << 12)
+
+/* GDMA1 broadcast frame MAC address destination port */
+#define GDM1_BFRC_P_CPU     (0 << 8)
+#define GDM1_BFRC_P_GDMA1   (1 << 8)
+#define GDM1_BFRC_P_PPE     (6 << 8)
+
+/* GDMA1 multicast frame MAC address destination port */
+#define GDM1_MFRC_P_CPU     (0 << 4)
+#define GDM1_MFRC_P_GDMA1   (1 << 4)
+#define GDM1_MFRC_P_PPE     (6 << 4)
+
+/* GDMA1 other MAC address frame destination port */
+#define GDM1_OFRC_P_CPU     (0 << 0)
+#define GDM1_OFRC_P_GDMA1   (1 << 0)
+#define GDM1_OFRC_P_PPE     (6 << 0)
+#endif
+
+enum FoeSma {
+	DROP = 0,		/* Drop the packet */
+	DROP2 = 1,		/* Drop the packet */
+	ONLY_FWD_CPU = 2,	/* Only Forward to CPU */
+	FWD_CPU_BUILD_ENTRY = 3	/* Forward to CPU and build new FOE entry */
+};
+
+enum BindDir {
+	UPSTREAM_ONLY = 0,	/* only speed up upstream flow */
+	DOWNSTREAM_ONLY = 1,	/* only speed up downstream flow */
+	BIDIRECTION = 2		/* speed up bi-direction flow */
+};
+
+#if defined (CONFIG_HNAT_V2)
+enum FoeCpuReason {
+	TTL_0 = 0x02, /* IPv4(IPv6) TTL(hop limit) = 0 */
+	HAS_OPTION_HEADER = 0x03, /* IPv4(IPv6) has option(extension) header */
+	NO_FLOW_IS_ASSIGNED = 0x07,	/* No flow is assigned */
+	IPV4_WITH_FRAGMENT = 0x08,	/* IPv4 HNAT doesn't support IPv4 /w fragment */
+	IPV4_HNAPT_DSLITE_WITH_FRAGMENT = 0x09,	/* IPv4 HNAPT/DS-Lite doesn't support IPv4 /w fragment */
+	IPV4_HNAPT_DSLITE_WITHOUT_TCP_UDP = 0x0A,	/* IPv4 HNAPT/DS-Lite can't find TCP/UDP sport/dport */
+	IPV6_5T_6RD_WITHOUT_TCP_UDP = 0x0B,	/* IPv6 5T-route/6RD can't find TCP/UDP sport/dport */
+	TCP_FIN_SYN_RST = 0x0C,	/* Ingress packet is TCP fin/syn/rst (for IPv4 NAPT/DS-Lite or IPv6 5T-route/6RD) */
+	UN_HIT = 0x0D,		/* FOE Un-hit */
+	HIT_UNBIND = 0x0E,	/* FOE Hit unbind */
+	HIT_UNBIND_RATE_REACH = 0x0F,	/* FOE Hit unbind & rate reach */
+	HIT_BIND_TCP_FIN = 0x10,	/* Hit bind PPE TCP FIN entry */
+	HIT_BIND_TTL_1 = 0x11,	/* Hit bind PPE entry and TTL(hop limit) = 1 and TTL(hot limit) - 1 */
+	HIT_BIND_WITH_VLAN_VIOLATION = 0x12,	/* Hit bind and VLAN replacement violation
+						   (Ingress 1(0) VLAN layers and egress 4(3 or 4) VLAN layers) */
+	HIT_BIND_KEEPALIVE_UC_OLD_HDR = 0x13,	/* Hit bind and keep alive with unicast old-header packet */
+	HIT_BIND_KEEPALIVE_MC_NEW_HDR = 0x14,	/* Hit bind and keep alive with multicast new-header packet */
+	HIT_BIND_KEEPALIVE_DUP_OLD_HDR = 0x15,	/* Hit bind and keep alive with duplicate old-header packet */
+	HIT_BIND_FORCE_TO_CPU = 0x16,	/* FOE Hit bind & force to CPU */
+	HIT_BIND_WITH_OPTION_HEADER = 0x17, /* Hit bind and remove tunnel IP header, but inner IP has option/next header */
+	HIT_BIND_EXCEED_MTU = 0x1C,	/* Hit bind and exceed MTU */
+#if defined (CONFIG_RALINK_MT7621)
+	HIT_BIND_MULTICAST_TO_CPU = 0x18,	/*  Switch clone multicast packet to CPU */
+	HIT_BIND_MULTICAST_TO_GMAC_CPU = 0x19,	/*  Switch clone multicast packet to GMAC1 & CPU */
+	HIT_PRE_BIND = 0x1A			/*  Pre-bind */
+#else
+	HIT_BIND_MULTICAST_TO_CPU = 0x1F,	/*  Switch clone multicast packet to CPU */
+	HIT_BIND_MULTICAST_TO_GMAC_CPU = 0x1F	/*  fake definition */
+#endif
+};
+#else
+enum FoeCpuReason {
+	TTL_0 = 0x80,		/* TTL=0 */
+	FOE_EBL_NOT_IPV4_HLEN5 = 0x90,	/* FOE enable & not IPv4h5nf */
+	FOE_EBL_NOT_TCP_UDP_L4_READY = 0x91,	/* FOE enable & not TCP/UDP/L4_read */
+	TCP_SYN_FIN_RST = 0x92,	/* TCP SYN/FIN/RST */
+	UN_HIT = 0x93,		/* FOE Un-hit */
+	HIT_UNBIND = 0x94,	/* FOE Hit unbind */
+	HIT_UNBIND_RATE_REACH = 0x95,	/* FOE Hit unbind & rate reach */
+	HIT_FIN = 0x96,		/* FOE Hit fin */
+	HIT_BIND_TTL_1 = 0x97,	/* FOE Hit bind & ttl=1 & ttl-1 */
+	HIT_BIND_KEEPALIVE = 0x98,	/* FOE Hit bind & keep alive */
+	HIT_BIND_FORCE_TO_CPU = 0x99,	/* FOE Hit bind & force to CPU */
+	ACL_FOE_TBL_ERR = 0x9A,	/* ACL link foe table error !(static & unbind) */
+	ACL_TBL_TTL_1 = 0x9B,	/* ACL link FOE table & TTL=1 & TTL-1 */
+	ACL_ALERT_CPU = 0x9C,	/* ACL alert CPU */
+	NO_FORCE_DEST_PORT = 0xA0,	/* No force destination port */
+	ACL_FORCE_PRIORITY0 = 0xA8,	/* ACL to UP0 */
+	ACL_FORCE_PRIORITY1 = 0xA9,	/* ACL to UP1 */
+	ACL_FORCE_PRIORITY2 = 0xAA,	/* ACL to UP2 */
+	ACL_FORCE_PRIORITY3 = 0xAB,	/* ACL to UP3 */
+	ACL_FORCE_PRIORITY4 = 0xAC,	/* ACL to UP4 */
+	ACL_FORCE_PRIORITY5 = 0xAD,	/* ACL to UP5 */
+	ACL_FORCE_PRIORITY6 = 0xAE,	/* ACL to UP6 */
+	ACL_FORCE_PRIORITY7 = 0xAF,	/* ACL to UP7 */
+	EXCEED_MTU = 0xA1	/* Exceed mtu */
+};
+#endif
+
+#if 0
+#define CONFIG_RA_NAT_HW
+
+#define CONFIG_RA_HW_NAT_LAN_VLANID 2
+#define CONFIG_RA_HW_NAT_WAN_VLANID 1
+
+#define CONFIG_RA_HW_NAT_BINDING_THRESHOLD	30
+#define CONFIG_RA_HW_NAT_QURT_LMT		16383
+#define CONFIG_RA_HW_NAT_HALF_LMT		16383
+#define CONFIG_RA_HW_NAT_FULL_LMT		16383
+
+//#define CONFIG_RA_HW_NAT_TBL_1K
+//#define CONFIG_RA_HW_NAT_TBL_2K
+#define CONFIG_RA_HW_NAT_TBL_4K
+//#define CONFIG_RA_HW_NAT_TBL_8K
+//#define CONFIG_RA_HW_NAT_TBL_16K
+
+//#define CONFIG_RA_HW_NAT_HASH0
+#define CONFIG_RA_HW_NAT_HASH1
+//#define CONFIG_RA_HW_NAT_HASH2
+//#define CONFIG_RA_HW_NAT_HASH3
+
+#define CONFIG_RA_HW_NAT_PRE_ACL_SIZE		383
+#define CONFIG_RA_HW_NAT_PRE_MTR_SIZE		32
+#define CONFIG_RA_HW_NAT_PRE_AC_SIZE		32
+#define CONFIG_RA_HW_NAT_POST_MTR_SIZE		32
+#define CONFIG_RA_HW_NAT_POST_AC_SIZE		32
+#define CONFIG_RA_HW_NAT_TCP_KA			1
+#define CONFIG_RA_HW_NAT_UDP_KA			1
+#define CONFIG_RA_HW_NAT_NTU_KA			1
+#define CONFIG_RA_HW_NAT_ACL_DLTA		3
+#define CONFIG_RA_HW_NAT_UNB_DLTA		3
+#define CONFIG_RA_HW_NAT_UNB_MNP		1000
+#define CONFIG_RA_HW_NAT_UDP_DLTA		5
+#define CONFIG_RA_HW_NAT_TCP_DLTA		5
+#define CONFIG_RA_HW_NAT_FIN_DLTA		5
+#define CONFIG_RA_HW_NAT_NTU_DLTA		5
+
+//#define CONFIG_RA_HW_NAT_IPV6
+//#define CONFIG_RA_HW_NAT_ACL2UP_HELPER
+
+#endif
+
+/* PPE_GLO_CFG, Offset=0x200 */
+#if defined (CONFIG_RALINK_MT7621)
+#define DFL_TTL0_DRP		(1)	/* 1:Drop, 0: Alert CPU */
+#else
+#define DFL_TTL0_DRP		(0)	/* 1:Drop, 0: Alert CPU */
+#endif
+
+#if! defined (CONFIG_HNAT_V2)
+
+#define DFL_VPRI_EN		(1)	/* Use VLAN pri tag as priority desision */
+#define DFL_DPRI_EN		(1)	/* Use DSCP as priority decision */
+
+#if defined (CONFIG_RA_HW_NAT_ACL2UP_HELPER)
+#define DFL_REG_DSCP		(0)	/* Re-gePnerate DSCP */
+#define DFL_REG_VPRI		(1)	/* Re-generate VLAN priority tag */
+#else
+#define DFL_REG_DSCP		(0)	/* Re-gePnerate DSCP */
+#define DFL_REG_VPRI		(0)	/* Re-generate VLAN priority tag */
+#endif
+
+#define DFL_ACL_PRI_EN		(1)	/* ACL force priority for hit unbind and rate reach */
+
+/* FreeQueueLen	|RedMode=0| RedMode=1| RedMode=2 | RedMode=3
+ * -------------+----------+----------+-----------+-----------
+ *    0-31	  50%	    75%		100%	    100%
+ *    32-63	  25%	    50%		75%	    100%
+ *    64-95	   0%	    25%		50%	    75%
+ *    96-128	   0%	    0%		25%	    50%
+ */
+#define DFL_RED_MODE		(1)
+
+/* DSCPx_y_MAP_UP=0x60~0x7C */
+#define DFL_DSCP0_7_UP		(0x00000000)	/* User priority of DSCP0~7 */
+#define DFL_DSCP24_31_UP	(0x33333333)	/* User priority of DSCP24~31 */
+#define DFL_DSCP8_15_UP		(0x11111111)	/* User priority of DSCP8~15 */
+#define DFL_DSCP16_23_UP	(0x22222222)	/* User priority of DSCP16~23 */
+#define DFL_DSCP32_39_UP	(0x44444444)	/* User priority of DSCP32~39 */
+#define DFL_DSCP40_47_UP	(0x55555555)	/* User priority of DSCP40~47 */
+#define DFL_DSCP48_55_UP	(0x66666666)	/* User priority of DSCP48~55 */
+#define DFL_DSCP56_63_UP	(0x77777777)	/* User priority of DSCP56~63 */
+
+/* AUTO_UP_CFG=0x80~0x84 */
+
+/* 
+ * 0	    ATUP_BND1	    ATUP_BND2	    ATUP_BND3		16K
+ * |-------------|-------------|-----------------|--------------|
+ *    ATUP_R1_UP    ATUP_R2_UP	    ATUP_R3_UP	    ATUP_R4_UP
+ */
+#define DFL_ATUP_BND1		(256)	/* packet length boundary 1 */
+#define DFL_ATUP_BND2		(512)	/* packet length boundary 2 */
+#define DFL_ATUP_BND3		(1024)	/* packet length boundary 3 */
+#define DFL_ATUP_R1_UP		(0)	/* user priority of range 1 */
+#define DFL_ATUP_R2_UP		(2)	/* user priority of range 2 */
+#define DFL_ATUP_R3_UP		(4)	/* user priority of range 3 */
+#define DFL_ATUP_R4_UP		(6)	/* user priority of range 4 */
+
+/* UP_RES=0x88 */
+#define PUP_WT_OFFSET		(0)	/* weight of port priority */
+#define VUP_WT_OFFSET		(4)	/* weight of VLAN priority */
+#define DUP_WT_OFFSET		(8)	/* weight of DSCP priority */
+#define AUP_WT_OFFSET		(12)	/* weight of ACL priority */
+#define FUP_WT_OFFSET		(16)	/* weight of FOE priority */
+#define ATP_WT_OFFSET		(20)	/* weight of Auto priority */
+
+#if defined (CONFIG_RA_HW_NAT_ACL2UP_HELPER)
+#define DFL_UP_RES		 (7<<FUP_WT_OFFSET)	/* use user priority in foe entry */
+#else
+#define DFL_UP_RES		((0<<ATP_WT_OFFSET) | (0<<VUP_WT_OFFSET) |\
+				 (7<<DUP_WT_OFFSET) | (0<<AUP_WT_OFFSET) | \
+				 (0<<FUP_WT_OFFSET) | (0<<ATP_WT_OFFSET) )
+#endif
+
+/* UP_MAP_VPRI=0x8C */
+#define DFL_UP0_VPRI		(0x0)	/* user pri 0 map to vlan pri tag */
+#define DFL_UP3_VPRI		(0x3)	/* user pri 3 map to vlan pri tag */
+#define DFL_UP1_VPRI		(0x1)	/* user pri 1 map to vlan pri tag */
+#define DFL_UP2_VPRI		(0x2)	/* user pri 2 map to vlan pri tag */
+#define DFL_UP4_VPRI		(0x4)	/* user pri 4 map to vlan pri tag */
+#define DFL_UP5_VPRI		(0x5)	/* user pri 5 map to vlan pri tag */
+#define DFL_UP6_VPRI		(0x6)	/* user pri 6 map to vlan pri tag */
+#define DFL_UP7_VPRI		(0x7)	/* user pri 7 map to vlan pri tag */
+
+/* UPx_y_MAP_IDSCP=0x90~0x94 */
+#define DFL_UP0_IDSCP		(0x00)	/* user pri 0 map to in-profile DSCP */
+#define DFL_UP3_IDSCP		(0x18)	/* user pri 3 map to in-profile DSCP */
+#define DFL_UP1_IDSCP		(0x08)	/* user pri 1 map to in-profile DSCP */
+#define DFL_UP2_IDSCP		(0x10)	/* user pri 2 map to in-profile DSCP */
+#define DFL_UP4_IDSCP		(0x20)	/* user pri 4 map to in-profile DSCP */
+#define DFL_UP5_IDSCP		(0x28)	/* user pri 5 map to in-profile DSCP */
+#define DFL_UP6_IDSCP		(0x30)	/* user pri 6 map to in-profile DSCP */
+#define DFL_UP7_IDSCP		(0x38)	/* user pri 7 map to in-profile DSCP */
+
+/* UPx_y_MAP_ODSCP=0x98~0x9C */
+#define DFL_UP0_ODSCP		(0x00)	/* user pri 0 map to out-profile DSCP */
+#define DFL_UP3_ODSCP		(0x10)	/* user pri 3 map to out-profile DSCP */
+#define DFL_UP1_ODSCP		(0x00)	/* user pri 1 map to out-profile DSCP */
+#define DFL_UP2_ODSCP		(0x08)	/* user pri 2 map to out-profile DSCP */
+#define DFL_UP4_ODSCP		(0x18)	/* user pri 4 map to out-profile DSCP */
+#define DFL_UP5_ODSCP		(0x20)	/* user pri 5 map to out-profile DSCP */
+#define DFL_UP6_ODSCP		(0x28)	/* user pri 6 map to out-profile DSCP */
+#define DFL_UP7_ODSCP		(0x30)	/* user pri 7 map to out-profile DSCP */
+
+/* UP_MAP_AC=0xA0 */
+/* GDMA Q3 for CPU(slow path), Q2-Q0 for HNAT(fast path) */
+#define DFL_UP0_AC		(0)	/* user pri 0 map to access category */
+#define DFL_UP1_AC		(0)	/* user pri 1 map to access category */
+#define DFL_UP2_AC		(0)	/* user pri 2 map to access category */
+#define DFL_UP3_AC		(0)	/* user pri 3 map to access category */
+#define DFL_UP4_AC		(1)	/* user pri 4 map to access category */
+#define DFL_UP5_AC		(1)	/* user pri 5 map to access category */
+#define DFL_UP6_AC		(2)	/* user pri 6 map to access category */
+#define DFL_UP7_AC		(2)	/* user pri 7 map to access category */
+
+#endif
+
+/* 
+ * PPE Flow Set 
+ */
+#if defined (CONFIG_HNAT_V2)
+#define BIT_FBC_FOE		(1<<0)	/* PPE engine for broadcast flow */
+#define BIT_FMC_FOE		(1<<1)	/* PPE engine for multicast flow */
+#define BIT_FUC_FOE		(1<<2)	/* PPE engine for multicast flow */
+#define BIT_IPV6_3T_ROUTE_EN	(1<<8)	/* IPv6 3-tuple route */
+#define BIT_IPV6_5T_ROUTE_EN	(1<<9)	/* IPv6 5-tuple route */
+#define BIT_IPV6_6RD_EN		(1<<10)	/* IPv6 6RD */
+#define BIT_IPV4_NAT_EN		(1<<12)	/* IPv4 NAT */
+#define BIT_IPV4_NAPT_EN	(1<<13)	/* IPv4 NAPT */
+#define BIT_IPV4_DSL_EN		(1<<14)	/* IPv4 DS-Lite */
+#define BIT_IP_PROT_CHK_BLIST	(1<<16)	/* IP protocol check is black/white list */
+#define BIT_IPV4_NAT_FRAG_EN	(1<<17)	/* Enable fragment support for IPv4 NAT flow */
+#define BIT_IPV6_HASH_FLAB	(1<<18)	/* For IPv6 5-tuple and 6RD flow, using flow label instead of sport and dport to do HASH */
+#define BIT_IPV4_HASH_GREK	(1<<19)	/* For IPv4 NAT, adding GRE key into HASH */
+#define BIT_IPV6_HASH_GREK	(1<<20)	/* For IPv6 3-tuple, adding GRE key into HASH */
+
+#define IS_IPV6_FLAB_EBL()	(RegRead(PPE_FLOW_SET) & BIT_IPV6_HASH_FLAB) ? 1 : 0
+
+#else
+#define BIT_FBC_POSA		(1<<0)	/* post-account engine for broadcase flow */
+#define BIT_FBC_POSM		(1<<1)	/* post-meter engine for broadcast flow */
+#define BIT_FBC_FOE		(1<<2)	/* FOE engine for broadcast flow */
+#define BIT_FBC_PREA		(1<<3)	/* pre-account engine for broadcast flow */
+#define BIT_FBC_PREM		(1<<4)	/* pre-meter engine for broadcast flow */
+#define BIT_FBC_ACL		(1<<5)	/* ACL engine for boardcast flow */
+
+#define BIT_FMC_POSA		(1<<8)	/* post-account engine for broadcase flow */
+#define BIT_FMC_POSM		(1<<9)	/* post-meter engine for multicast flow */
+#define BIT_FMC_FOE		(1<<10)	/* FOE engine for multicast flow */
+#define BIT_FMC_PREA		(1<<11)	/* pre-account engine for multicast flow */
+#define BIT_FMC_PREM		(1<<12)	/* pre-meter engine for multicast flow */
+#define BIT_FMC_ACL		(1<<13)	/* ACL engine for multicast flow */
+
+#define BIT_FUC_POSA		(1<<16)	/* post-account engine for broadcase flow */
+#define BIT_FUC_POSM	    	(1<<17)	/* post-meter engine for multicast flow */
+#define BIT_FUC_FOE		(1<<18)	/* FOE engine for multicast flow */
+#define BIT_FUC_PREA		(1<<19)	/* pre-account engine for multicast flow */
+#define BIT_FUC_PREM		(1<<20)	/* pre-meter engine for multicast flow */
+#define BIT_FUC_ACL		(1<<21)	/* ACL engine for boardcast flow */
+#define BIT_IPV4_NAPT_EN        (1<<27)	/* Enable HNAPT engine for IPv4 flow */
+#define BIT_IPV4_NAT_EN         (1<<26)	/* Enable HNAT engine for IPv4 flow */
+#define BIT_IPV6_FOE_EN		(1<<24)	/* plicy engine for IPV6 */
+#define BIT_IPV6_PE_EN		(1<<25)	/* FoE engine for IPV6 */
+
+#define PRE_ACL_SIZE		CONFIG_RA_HW_NAT_PRE_ACL_SIZE
+#define PRE_MTR_SIZE		CONFIG_RA_HW_NAT_PRE_MTR_SIZE
+#define PRE_AC_SIZE		CONFIG_RA_HW_NAT_PRE_AC_SIZE
+#define POST_MTR_SIZE		CONFIG_RA_HW_NAT_POST_MTR_SIZE
+#define POST_AC_SIZE		CONFIG_RA_HW_NAT_POST_AC_SIZE
+
+/* Account engine enable period (unit in 1ms) */
+#define DFL_POL_AC_PRD		0xFFFF
+
+#endif
+
+/* 
+ * PPE FOE Bind Rate 
+ */
+/* packet in a time stamp unit */
+#define DFL_FOE_BNDR		CONFIG_RA_HW_NAT_BINDING_THRESHOLD
+
+/* 
+ * PPE_FOE_LMT 
+ */
+/* smaller than 1/4 of total entries */
+#define DFL_FOE_QURT_LMT	16383 //CONFIG_RA_HW_NAT_QURT_LMT
+
+/* between 1/2 and 1/4 of total entries */
+#define DFL_FOE_HALF_LMT	16383 //CONFIG_RA_HW_NAT_HALF_LMT
+
+/* between full and 1/2 of total entries */
+#define DFL_FOE_FULL_LMT	16383 //CONFIG_RA_HW_NAT_FULL_LMT
+
+/* 
+ * PPE_FOE_KA 
+ */
+/* visit a FOE entry every FOE_KA_T * 1 msec */
+#define DFL_FOE_KA_T		1
+
+/* FOE_TCP_KA * FOE_KA_T * FOE_4TB_SIZ */
+#define DFL_FOE_TCP_KA		CONFIG_RA_HW_NAT_TCP_KA
+
+/* FOE_UDP_KA * FOE_KA_T * FOE_4TB_SIZ */
+#define DFL_FOE_UDP_KA		CONFIG_RA_HW_NAT_UDP_KA
+
+/* FOE_NTU_KA * FOE_KA_T * FOE_4TB_SIZ */
+#define DFL_FOE_NTU_KA		CONFIG_RA_HW_NAT_NTU_KA
+
+/* 
+ * PPE_FOE_CFG 
+ */
+#if defined (CONFIG_RA_HW_NAT_HASH0)
+#define DFL_FOE_HASH_MODE	0
+#elif defined (CONFIG_RA_HW_NAT_HASH1)
+#define DFL_FOE_HASH_MODE	1
+#elif defined (CONFIG_RA_HW_NAT_HASH2)
+#define DFL_FOE_HASH_MODE	2
+#elif defined (CONFIG_RA_HW_NAT_HASH3)
+#define DFL_FOE_HASH_MODE	3
+#endif
+
+#define HASH_SEED		0x12345678
+#define DFL_FOE_UNB_AGE		1	/* Unbind state age enable */
+#define DFL_FOE_TCP_AGE		1	/* Bind TCP age enable */
+#define DFL_FOE_NTU_AGE		1	/* Bind TCP age enable */
+#define DFL_FOE_UDP_AGE		1	/* Bind UDP age enable */
+#define DFL_FOE_FIN_AGE		1	/* Bind TCP FIN age enable */
+
+#if defined (CONFIG_HNAT_V2)
+#define DFL_FOE_KA		3	/* 0:disable 1:unicast old 2: multicast new 3. duplicate old */
+#else
+#define DFL_FOE_KA		0	/* KeepAlive packet with (0:NewHeader,1:OrgHeader) */
+#define DFL_FOE_KA_EN		1	/* Keep alive enable */
+#endif
+
+/* 
+ * PPE_FOE_UNB_AGE 
+ */
+/*The min threshold of packet count for aging out at unbind state */
+#define DFL_FOE_UNB_MNP		CONFIG_RA_HW_NAT_UNB_MNP
+/* Delta time for aging out an ACL link to FOE entry */
+#define DFL_FOE_ACL_DLTA        CONFIG_RA_HW_NAT_ACL_DLTA
+/* Delta time for aging out an unbind FOE entry */
+#define DFL_FOE_UNB_DLTA	CONFIG_RA_HW_NAT_UNB_DLTA
+/* Delta time for aging out an bind Non-TCP/UDP FOE entry */
+#define DFL_FOE_NTU_DLTA	CONFIG_RA_HW_NAT_NTU_DLTA
+
+/* 
+ * PPE_FOE_BND_AGE1 
+ */
+/* Delta time for aging out an bind UDP FOE entry */
+#define DFL_FOE_UDP_DLTA	CONFIG_RA_HW_NAT_UDP_DLTA
+
+/* 
+ * PPE_FOE_BND_AGE2
+ */
+/* Delta time for aging out an bind TCP FIN entry */
+#define DFL_FOE_FIN_DLTA 	CONFIG_RA_HW_NAT_FIN_DLTA
+/* Delta time for aging out an bind TCP entry */
+#define DFL_FOE_TCP_DLTA	CONFIG_RA_HW_NAT_TCP_DLTA
+
+#define DFL_FOE_TTL_REGEN	1	/* TTL = TTL -1 */
+
+#endif
--- /dev/null
+++ b/include/net/nat/hw_nat/ra_nat.h
@@ -0,0 +1,326 @@
+/*
+    Module Name:
+    ra_nat.h
+
+    Abstract:
+
+    Revision History:
+    Who         When            What
+    --------    ----------      ----------------------------------------------
+    Name        Date            Modification logs
+    Steven Liu  2006-10-06      Initial version
+*/
+
+#ifndef _RA_NAT_WANTED
+#define _RA_NAT_WANTED
+
+#include "foe_fdb.h"
+#include <linux/ip.h>
+#include <linux/ipv6.h>
+
+/*
+ * TYPEDEFS AND STRUCTURES
+ */
+enum DstPort {
+	DP_RA0 = 11,
+#if defined (CONFIG_RT2860V2_AP_MBSS) || defined (CONFIG_RTPCI_AP_MBSS) || defined (CONFIG_MBSS_SUPPORT)
+	DP_RA1 = 12,
+	DP_RA2 = 13,
+	DP_RA3 = 14,
+	DP_RA4 = 15,
+	DP_RA5 = 16,
+	DP_RA6 = 17,
+	DP_RA7 = 18,
+	DP_RA8 = 19,
+	DP_RA9 = 20,
+	DP_RA10 = 21,
+	DP_RA11 = 22,
+	DP_RA12 = 23,
+	DP_RA13 = 24,
+	DP_RA14 = 25,
+	DP_RA15 = 26,
+#endif // CONFIG_RT2860V2_AP_MBSS //
+#if defined (CONFIG_RT2860V2_AP_WDS) || defined (CONFIG_RTPCI_AP_WDS) || defined (CONFIG_WDS_SUPPORT)
+	DP_WDS0 = 27,
+	DP_WDS1 = 28,
+	DP_WDS2 = 29,
+	DP_WDS3 = 30,
+#endif // CONFIG_RT2860V2_AP_WDS //
+#if defined (CONFIG_RT2860V2_AP_APCLI) || defined (CONFIG_RTPCI_AP_APCLI) || defined (CONFIG_APCLI_SUPPORT)
+	DP_APCLI0 = 31,
+#endif // CONFIG_RT2860V2_AP_APCLI //
+#if defined (CONFIG_RT2860V2_AP_MESH)
+	DP_MESH0 = 32,
+#endif // CONFIG_RT2860V2_AP_MESH //
+	DP_RAI0 = 33,
+#if defined (CONFIG_RT3090_AP_MBSS) || defined (CONFIG_RT5392_AP_MBSS) || \
+    defined (CONFIG_RT3572_AP_MBSS) || defined (CONFIG_RT5572_AP_MBSS) || \
+    defined (CONFIG_RT5592_AP_MBSS) || defined (CONFIG_RT3593_AP_MBSS) || \
+    defined (CONFIG_MT7610_AP_MBSS) || defined (CONFIG_RTPCI_AP_MBSS)  || \
+    defined (CONFIG_MBSS_SUPPORT)
+	DP_RAI1 = 34,
+	DP_RAI2 = 35,
+	DP_RAI3 = 36,
+	DP_RAI4 = 37,
+	DP_RAI5 = 38,
+	DP_RAI6 = 39,
+	DP_RAI7 = 40,
+	DP_RAI8 = 41,
+	DP_RAI9 = 42,
+	DP_RAI10 = 43,
+	DP_RAI11 = 44,
+	DP_RAI12 = 45,
+	DP_RAI13 = 46,
+	DP_RAI14 = 47,
+	DP_RAI15 = 48,
+#endif // CONFIG_RTDEV_AP_MBSS //
+#if defined (CONFIG_RT3090_AP_WDS) || defined (CONFIG_RT5392_AP_WDS) || \
+    defined (CONFIG_RT3572_AP_WDS) || defined (CONFIG_RT5572_AP_WDS) || \
+    defined (CONFIG_RT5592_AP_WDS) || defined (CONFIG_RT3593_AP_WDS) || \
+    defined (CONFIG_MT7610_AP_WDS) || defined (CONFIG_WDS_SUPPORT)
+	DP_WDSI0 = 49,
+	DP_WDSI1 = 50,
+	DP_WDSI2 = 51,
+	DP_WDSI3 = 52,
+#endif // CONFIG_RTDEV_AP_WDS //
+#if defined (CONFIG_RT3090_AP_APCLI) || defined (CONFIG_RT5392_AP_APCLI) || \
+    defined (CONFIG_RT3572_AP_APCLI) || defined (CONFIG_RT5572_AP_APCLI) || \
+    defined (CONFIG_RT5592_AP_APCLI) || defined (CONFIG_RT3593_AP_APCLI) || \
+    defined (CONFIG_MT7610_AP_APCLI) || defined (CONFIG_APCLI_SUPPORT)
+	DP_APCLII0 = 53,
+#endif // CONFIG_RTDEV_AP_APCLI //
+#if defined (CONFIG_RT3090_AP_MESH) || defined (CONFIG_RT5392_AP_MESH) || \
+    defined (CONFIG_RT3572_AP_MESH) || defined (CONFIG_RT5572_AP_MESH) || \
+    defined (CONFIG_RT5592_AP_MESH) || defined (CONFIG_RT3593_AP_MESH) || \
+    defined (CONFIG_MT7610_AP_MESH)
+	DP_MESHI0 = 54,
+#endif // CONFIG_RTDEV_AP_MESH //
+	MAX_WIFI_IF_NUM = 59,
+	DP_GMAC = 60,
+	DP_GMAC2 = 61,
+	DP_PCI = 62,
+	DP_USB = 63,
+	MAX_IF_NUM
+};
+
+typedef struct {
+#if defined (CONFIG_RALINK_MT7620)
+	uint16_t MAGIC_TAG;
+	uint32_t FOE_Entry:14;
+	uint32_t CRSN:5;
+	uint32_t SPORT:3;
+	uint32_t ALG:10;
+#elif defined (CONFIG_RALINK_MT7621)
+	uint16_t MAGIC_TAG;
+	uint32_t FOE_Entry:14;
+	uint32_t CRSN:5;
+	uint32_t SPORT:4;
+	uint32_t ALG:9;
+#else
+	uint16_t MAGIC_TAG;
+	uint32_t FOE_Entry:14;
+	uint32_t FVLD:1;
+	uint32_t ALG:1;
+	uint32_t AI:8;
+	uint32_t SP:3;
+	uint32_t AIS:1;
+	uint32_t RESV2:4;
+#endif
+#if defined (CONFIG_RA_HW_NAT_PPTP_L2TP)	
+	uint16_t SOURCE;
+	uint16_t DEST;
+#endif
+}  __attribute__ ((packed)) PdmaRxDescInfo4;
+
+typedef struct {
+	//layer2 header
+	uint8_t dmac[6];
+	uint8_t smac[6];
+
+	//vlan header 
+	uint16_t vlan_tag;
+	uint16_t vlan1_gap;
+	uint16_t vlan1;
+	uint16_t vlan2_gap;
+	uint16_t vlan2;
+	uint16_t vlan_layer;
+
+	//pppoe header
+	uint32_t pppoe_gap;
+	uint16_t ppp_tag;
+	uint16_t pppoe_sid;
+
+	//layer3 header
+	uint16_t eth_type;
+	struct iphdr iph;
+	struct ipv6hdr ip6h;
+
+	//layer4 header
+	struct tcphdr th;
+	struct udphdr uh;
+
+	uint32_t pkt_type;
+	uint8_t is_mcast;
+
+} PktParseResult;
+
+
+/*
+ * DEFINITIONS AND MACROS
+ */
+#ifndef NEXTHDR_IPIP
+#define NEXTHDR_IPIP 4
+#endif
+
+/*
+ *    2bytes	    4bytes 
+ * +-----------+-------------------+
+ * | Magic Tag | RX/TX Desc info4  |
+ * +-----------+-------------------+
+ * |<------FOE Flow Info---------->|
+ */
+#if defined (CONFIG_RA_HW_NAT_PPTP_L2TP)	
+#define FOE_INFO_LEN		    10
+#define FOE_MAGIC_FASTPATH	    0x7277
+#define FOE_MAGIC_L2TPPATH	    0x7278
+#else
+#define FOE_INFO_LEN		    6
+#endif
+#define FOE_MAGIC_PCI		    0x7273
+#define FOE_MAGIC_WLAN		    0x7274
+#define FOE_MAGIC_GE		    0x7275
+#define FOE_MAGIC_PPE		    0x7276
+
+/* choose one of them to keep HNAT related information in somewhere. */
+#if defined (CONFIG_SUPPORT_OPENWRT)
+//#define HNAT_USE_HEADROOM
+//#define HNAT_USE_TAILROOM
+#define HNAT_USE_SKB_CB
+#else
+#define HNAT_USE_HEADROOM
+//#define HNAT_USE_TAILROOM
+//#define HNAT_USE_SKB_CB
+#endif
+
+#if defined (HNAT_USE_HEADROOM)
+#define IS_SPACE_AVAILABLED(skb)    ((skb_headroom(skb) >= FOE_INFO_LEN) ? 1 : 0)
+#define FOE_INFO_START_ADDR(skb)    (skb->head)
+
+#if defined (CONFIG_HNAT_V2)
+#define FOE_MAGIC_TAG(skb)	    ((PdmaRxDescInfo4 *)((skb)->head))->MAGIC_TAG
+#define FOE_ENTRY_NUM(skb)	    ((PdmaRxDescInfo4 *)((skb)->head))->FOE_Entry
+#define FOE_ALG(skb)		    ((PdmaRxDescInfo4 *)((skb)->head))->ALG
+#define FOE_AI(skb)		    ((PdmaRxDescInfo4 *)((skb)->head))->CRSN
+#define FOE_SP(skb)		    ((PdmaRxDescInfo4 *)((skb)->head))->SPORT	//src_port or user priority
+#if defined (CONFIG_RA_HW_NAT_PPTP_L2TP)	
+#define FOE_SOURCE(skb)		    ((PdmaRxDescInfo4 *)((skb)->head))->SOURCE	//L4 src_port
+#define FOE_DEST(skb)		    ((PdmaRxDescInfo4 *)((skb)->head))->DEST	//L4 dest_port
+#endif
+#else
+#define FOE_MAGIC_TAG(skb)	    ((PdmaRxDescInfo4 *)((skb)->head))->MAGIC_TAG
+#define FOE_ENTRY_NUM(skb)	    ((PdmaRxDescInfo4 *)((skb)->head))->FOE_Entry
+#define FOE_ALG(skb)		    ((PdmaRxDescInfo4 *)((skb)->head))->ALG
+#define FOE_AI(skb)		    ((PdmaRxDescInfo4 *)((skb)->head))->AI
+#define FOE_SP(skb)		    ((PdmaRxDescInfo4 *)((skb)->head))->SP	//src_port or user priority
+#if defined (CONFIG_RA_HW_NAT_PPTP_L2TP)	
+#define FOE_SOURCE(skb)		    ((PdmaRxDescInfo4 *)((skb)->head))->SOURCE	//L4 src_port
+#define FOE_DEST(skb)		    ((PdmaRxDescInfo4 *)((skb)->head))->DEST	//L4 dest_port
+#endif
+#endif
+
+#elif defined (HNAT_USE_TAILROOM)
+
+#define IS_SPACE_AVAILABLED(skb)    ((skb_tailroom(skb) >= FOE_INFO_LEN) ? 1 : 0)
+#define FOE_INFO_START_ADDR(skb)    (skb->end - FOE_INFO_LEN)
+
+#if defined (CONFIG_HNAT_V2)
+#define FOE_MAGIC_TAG(skb)	    ((PdmaRxDescInfo4 *)((skb)->end-FOE_INFO_LEN))->MAGIC_TAG
+#define FOE_ENTRY_NUM(skb)	    ((PdmaRxDescInfo4 *)((skb)->end-FOE_INFO_LEN))->FOE_Entry
+#define FOE_ALG(skb)		    ((PdmaRxDescInfo4 *)((skb)->end-FOE_INFO_LEN))->ALG
+#define FOE_AI(skb)		    ((PdmaRxDescInfo4 *)((skb)->end-FOE_INFO_LEN))->CRSN
+#define FOE_SP(skb)		    ((PdmaRxDescInfo4 *)((skb)->end-FOE_INFO_LEN))->SPORT //src_port or user priority
+#if defined (CONFIG_RA_HW_NAT_PPTP_L2TP)	
+#define FOE_SOURCE(skb)		    ((PdmaRxDescInfo4 *)((skb)->end-FOE_INFO_LEN))->SOURCE	//L4 src_port
+#define FOE_DEST(skb)		    ((PdmaRxDescInfo4 *)((skb)->end-FOE_INFO_LEN))->DEST	//L4 dest_port
+#endif
+#else
+#define FOE_MAGIC_TAG(skb)	    ((PdmaRxDescInfo4 *)((skb)->end-FOE_INFO_LEN))->MAGIC_TAG
+#define FOE_ENTRY_NUM(skb)	    ((PdmaRxDescInfo4 *)((skb)->end-FOE_INFO_LEN))->FOE_Entry
+#define FOE_ALG(skb)		    ((PdmaRxDescInfo4 *)((skb)->end-FOE_INFO_LEN))->ALG
+#define FOE_AI(skb)		    ((PdmaRxDescInfo4 *)((skb)->end-FOE_INFO_LEN))->AI
+#define FOE_SP(skb)		    ((PdmaRxDescInfo4 *)((skb)->end-FOE_INFO_LEN))->SP	//src_port or user priority
+#endif
+
+#elif defined (HNAT_USE_SKB_CB)
+//change the position of skb_CB if necessary
+#define CB_OFFSET		    32
+#define IS_SPACE_AVAILABLED(skb)    1
+#define FOE_INFO_START_ADDR(skb)    (skb->cb +  CB_OFFSET)
+
+#if defined (CONFIG_HNAT_V2)
+#define FOE_MAGIC_TAG(skb)	    ((PdmaRxDescInfo4 *)((skb)->cb + CB_OFFSET))->MAGIC_TAG
+#define FOE_ENTRY_NUM(skb)	    ((PdmaRxDescInfo4 *)((skb)->cb + CB_OFFSET))->FOE_Entry
+#define FOE_ALG(skb)		    ((PdmaRxDescInfo4 *)((skb)->cb + CB_OFFSET))->ALG
+#define FOE_AI(skb)		    ((PdmaRxDescInfo4 *)((skb)->cb + CB_OFFSET))->CRSN
+#define FOE_SP(skb)		    ((PdmaRxDescInfo4 *)((skb)->cb + CB_OFFSET))->SPORT	//src_port or user priority
+#else
+#define FOE_MAGIC_TAG(skb)	    ((PdmaRxDescInfo4 *)((skb)->cb + CB_OFFSET))->MAGIC_TAG
+#define FOE_ENTRY_NUM(skb)	    ((PdmaRxDescInfo4 *)((skb)->cb + CB_OFFSET))->FOE_Entry
+#define FOE_ALG(skb)		    ((PdmaRxDescInfo4 *)((skb)->cb + CB_OFFSET))->ALG
+#define FOE_AI(skb)		    ((PdmaRxDescInfo4 *)((skb)->cb + CB_OFFSET))->AI
+#define FOE_SP(skb)		    ((PdmaRxDescInfo4 *)((skb)->cb + CB_OFFSET))->SP	//src_port or user priority
+#endif
+
+#endif
+
+#define IS_MAGIC_TAG_VALID(skb)	    ((FOE_MAGIC_TAG(skb) == FOE_MAGIC_PCI) || \
+				    (FOE_MAGIC_TAG(skb) == FOE_MAGIC_GE)   || \
+				    (FOE_MAGIC_TAG(skb) == FOE_MAGIC_WLAN))
+
+
+#if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,21)
+#define LAYER2_HEADER(skb)		(skb)->mac_header
+#else
+#define LAYER2_HEADER(skb)		(skb)->mac.raw
+#endif
+
+#if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,21)
+#define LAYER3_HEADER(skb)		(skb)->network_header
+#else
+#define LAYER3_HEADER(skb)		(skb)->nh.raw
+#endif
+
+#if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,21)
+#define LAYER4_HEADER(skb)		(skb)->transport_header
+#else
+#define LAYER4_HEADER(skb)		(skb)->h.raw
+#endif
+
+
+/*
+ * EXPORT FUNCTION
+ */
+int32_t GetPppoeSid(struct sk_buff *skb, uint32_t vlan_gap, uint16_t * sid, uint16_t * ppp_tag);
+
+int PpeSetBindThreshold(uint32_t threshold);
+int PpeSetMaxEntryLimit(uint32_t full, uint32_t half, uint32_t qurt);
+int PpeSetRuleSize(uint16_t pre_acl, uint16_t pre_meter, uint16_t pre_ac,
+		   uint16_t post_meter, uint16_t post_ac);
+
+int PpeSetKaInterval(uint8_t tcp_ka, uint8_t udp_ka);
+int PpeSetUnbindLifeTime(uint8_t lifetime);
+int PpeSetBindLifetime(uint16_t tcp_fin, uint16_t udp_life, uint16_t fin_life);
+
+void    PpeSetEntryBind(struct sk_buff *skb, struct FoeEntry *foe_entry);
+int32_t PpeFillInL2Info(struct sk_buff * skb, struct FoeEntry * foe_entry);
+int32_t PpeFillInL3Info(struct sk_buff * skb, struct FoeEntry * foe_entry);
+int32_t PpeFillInL4Info(struct sk_buff * skb, struct FoeEntry * foe_entry);
+int32_t PpeSetForcePortInfo(struct sk_buff * skb, struct FoeEntry * foe_entry, int gmac_no);
+struct  net_device *ra_dev_get_by_name(const char *name);
+int32_t is8021Q(uint16_t eth_type);
+int32_t isSpecialTag(uint16_t eth_type);
+int32_t isHwVlanTx(struct sk_buff *skb);
+#if defined (CONFIG_HNAT_V2)
+void PpeSetCacheEbl(void);
+#endif
+#endif
--- /dev/null
+++ b/include/net/nat/hw_nat/foe_fdb.h
@@ -0,0 +1,679 @@
+/*
+    Module Name:
+    foe_fdb.h
+
+    Abstract:
+
+    Revision History:
+    Who         When            What
+    --------    ----------      ----------------------------------------------
+    Name        Date            Modification logs
+    Steven Liu  2006-10-06      Initial version
+*/
+
+#ifndef _FOE_FDB_WANTED
+#define _FOE_FDB_WANTED
+
+#include "hwnat_ioctl.h"
+#include "frame_engine.h"
+/*
+ * DEFINITIONS AND MACROS
+ */
+#define FOE_ENTRY_LIFE_TIME	5
+#define FOE_THRESHOLD		1000
+#define FOE_HASH_MASK		0x00001FFF
+#define FOE_HASH_WAY		2
+#define FOE_1K_SIZ_MASK		0x000001FF
+#define FOE_2K_SIZ_MASK		0x000003FF
+#define FOE_4K_SIZ_MASK		0x000007FF
+#define FOE_8K_SIZ_MASK		0x00000FFF
+#define FOE_16K_SIZ_MASK	0x00001FFF
+
+#if defined (CONFIG_RA_HW_NAT_TBL_1K)
+#define FOE_4TB_SIZ		1024
+#elif defined (CONFIG_RA_HW_NAT_TBL_2K)
+#define FOE_4TB_SIZ		2048
+#elif defined (CONFIG_RA_HW_NAT_TBL_4K)
+#define FOE_4TB_SIZ		4096
+#elif defined (CONFIG_RA_HW_NAT_TBL_8K)
+#define FOE_4TB_SIZ		8192
+#elif defined (CONFIG_RA_HW_NAT_TBL_16K)
+#define FOE_4TB_SIZ		16384
+#endif
+
+#define FOE_ENTRY_SIZ		128	/* for ipv6 backward compatible */
+
+#define IP_FORMAT(addr) \
+	((unsigned char *)&addr)[3], \
+        ((unsigned char *)&addr)[2], \
+        ((unsigned char *)&addr)[1], \
+        ((unsigned char *)&addr)[0]
+
+/*
+ * TYPEDEFS AND STRUCTURES
+ */
+
+enum FoeTblSize {
+	FoeTblSize_1K,
+	FoeTblSize_2K,
+	FoeTblSize_4K,
+	FoeTblSize_8K,
+	FoeTblSize_16K
+};
+
+enum VlanAction {
+	NO_ACT = 0,
+	MODIFY = 1,
+	INSERT = 2,
+	DELETE = 3
+};
+
+enum FoeEntryState {
+	INVALID = 0,
+	UNBIND = 1,
+	BIND = 2,
+	FIN = 3
+};
+
+enum FoeTblTcpUdp {
+	TCP = 0,
+	UDP = 1,
+	ANY = 2
+};
+
+enum FoeTblEE {
+	NOT_ENTRY_END = 0,
+	ENTRY_END_FP = 1,
+	ENTRY_END_FOE = 2
+};
+
+enum FoeLinkType {
+	LINK_TO_FOE = 0,
+	LINK_TO_FP = 1
+};
+
+enum FoeIPAct {
+	IPV4_HNAPT = 0,
+	IPV4_HNAT = 1,
+	IPV6_1T_ROUTE = 2,
+	IPV4_DSLITE = 3,
+	IPV6_3T_ROUTE = 4,
+	IPV6_5T_ROUTE = 5,
+	IPV6_6RD = 7,
+};
+
+#define IS_IPV4_HNAPT(x)	(((x)->bfib1.pkt_type == IPV4_HNAPT) ? 1: 0)
+#define IS_IPV4_HNAT(x)		(((x)->bfib1.pkt_type == IPV4_HNAT) ? 1 : 0)
+#define IS_IPV6_1T_ROUTE(x)	(((x)->bfib1.pkt_type == IPV6_1T_ROUTE) ? 1 : 0)
+#define IS_IPV4_DSLITE(x)	(((x)->bfib1.pkt_type == IPV4_DSLITE) ? 1 : 0)
+#define IS_IPV6_3T_ROUTE(x)	(((x)->bfib1.pkt_type == IPV6_3T_ROUTE) ? 1 : 0)
+#define IS_IPV6_5T_ROUTE(x)	(((x)->bfib1.pkt_type == IPV6_5T_ROUTE) ? 1 : 0)
+#define IS_IPV6_6RD(x)		(((x)->bfib1.pkt_type == IPV6_6RD) ? 1: 0)
+#define IS_IPV4_GRP(x)		(IS_IPV4_HNAPT(x) | IS_IPV4_HNAT(x))
+#define IS_IPV6_GRP(x)		(IS_IPV6_1T_ROUTE(x) | IS_IPV6_3T_ROUTE(x) | IS_IPV6_5T_ROUTE(x) | IS_IPV6_6RD(x) |  IS_IPV4_DSLITE(x))
+
+#if defined (CONFIG_HNAT_V2)
+
+/* state = unbind & dynamic */
+struct ud_info_blk1 {
+	uint32_t time_stamp:8;
+	uint32_t pcnt:16;	/* packet count */
+	uint32_t preb:1;
+	uint32_t pkt_type:3;
+	uint32_t state:2;
+	uint32_t udp:1;
+	uint32_t sta:1;		/* static entry */
+};
+
+/* state = bind & fin */
+struct bf_info_blk1 {
+	uint32_t time_stamp:15;
+	uint32_t ka:1;		/* keep alive */
+	uint32_t vlan_layer:3;
+	uint32_t psn:1;		/* egress packet has PPPoE session */
+#if defined (CONFIG_RALINK_MT7621)
+	uint32_t vpm:2;		/* 0:ethertype remark, 1:0x8100, 2:0x88a8 */
+#else
+	uint32_t dvp:1;		/* inform switch of keeping VPRI */
+	uint32_t drm:1;		/* inform switch of keeping DSCP(IPv4) or TC(IPv6) */
+#endif
+	uint32_t cah:1;		/* cacheable flag */
+	uint32_t rmt:1;		/* remove tunnel ip header (6rd/dslite only) */
+	uint32_t ttl:1;
+	uint32_t pkt_type:3;
+	uint32_t state:2;
+	uint32_t udp:1;
+	uint32_t sta:1;		/* static entry */
+};
+
+struct _info_blk2 {
+#if defined (CONFIG_RALINK_MT7621)
+	uint32_t qid:4;		/* QID in Qos Port */
+	uint32_t fqos:1;	/* force to PSE QoS port */
+	uint32_t dp:3;		/* force to PSE port x 
+			          0:PSE,1:GSW, 2:GMAC,4:PPE,5:QDMA,7=DROP */
+	uint32_t mcast:1;	/* multicast this packet to CPU */
+	uint32_t pcpl:1;	/* OSBN */
+	uint32_t mlen:1;	/* 0:post 1:pre packet length in meter */
+	uint32_t alen:1;	/* 0:post 1:pre packet length in accounting */
+	uint32_t port_mg:6;	/* port meter group */
+	uint32_t port_ag:6;	/* port account group */
+	uint32_t dscp:8;	/* DSCP value */
+#else
+	uint32_t fpidx:4;	/* force port index */
+	uint32_t fp:1;		/* force new user priority */
+	uint32_t up:3;		/* new user priority */
+	uint32_t fdq:4;		/* force DRAM queue (for CAR case) */
+	uint32_t port_mg:6;	/* port meter group */
+	uint32_t port_ag:6;	/* port account group */
+	uint32_t dscp:8;	/* DSCP value */
+#endif
+};
+
+#else
+/* state = unbind & dynamic */
+struct ud_info_blk1 {
+	uint32_t time_stamp:8;
+	uint32_t pcnt:16;	/* packet count */
+	uint32_t resv:2;
+	uint32_t pkt_type:2;	/* entry format */
+	uint32_t state:2;
+	uint32_t udp:1;
+	uint32_t sta:1;		/* static entry */
+};
+
+/* state = bind & fin */
+struct bf_info_blk1 {
+	uint16_t time_stamp;
+	uint16_t v1:2;
+	uint16_t v2:2;
+	uint16_t snap:2;
+	uint16_t pppoe:2;
+	uint16_t ttl:1;
+	uint16_t ka:1;		/* keep alive */
+	uint16_t pkt_type:2;	/* entry format */
+	uint16_t state:2;
+	uint16_t udp:1;
+	uint16_t sta:1;		/* static entry */
+};
+
+struct _info_blk2 {
+	uint16_t fd:1;		/* force destination */
+	uint16_t dp:3;		/* destination port (0:cpu,1:GE1) */
+	uint16_t fp:1;		/* force new user priority */
+	uint16_t up:3;		/* new user priority */
+	uint16_t port_mg:6;	/* port meter group */
+	uint16_t resv:1;
+	uint16_t me:1;		/* meter enable */
+	uint16_t port_ag:6;	/* port account group */
+	uint16_t drm:1;		/* remark IPv4 DSCP */
+	uint16_t ae:1;		/* account enable */
+	uint16_t dscp:8;	/* DSCP value */
+};
+#endif
+
+/*
+ * Foe Entry (64B)
+ *
+ *      IPV4:			     IPV6:
+ *	+-----------------------+    +-----------------------+
+ *	|  Information Block 1  |    |  Information Block 1  |
+ *	+-----------------------+    +-----------------------+
+ *	|	SIP(4B)		|    |     IPv6_DIP0(4B)     |
+ *	+-----------------------+    +-----------------------+
+ *	|	DIP(4B)		|    |     IPv6_DIP1(4B)     |
+ *	+-----------------------+    +-----------------------+
+ *	| SPORT(2B) | DPORT(2B) |    |	      Rev(4B)        |
+ *	+-----------+-----------+    +-----------------------+
+ *	| Information Block 2   |    |	Information Block 2  | 
+ *	+-----------------------+    +-----------------------+
+ *	|      New SIP(4B)	|    |     IPv6_DIP2(4B)     |
+ *	+-----------------------+    +-----------------------+
+ *	|      New DIP(4B)	|    |     IPv6_DIP3(4B)     |
+ *	+-----------------------+    +-----------------------+
+ *	| New SPORT | New DPORT |    |	       Rev(4B)       |
+ *	+-----------+-----------+    +-----------------------+
+ *	| VLAN1(2B) |DMAC[47:32]|    | VLAN1(2B) |DMAC[47:32]|
+ *	+-----------|-----------+    +-----------|-----------+
+ *	|	DMAC[31:0]      |    |       DMAC[31:0]      |
+ *	+-----------------------+    +-----------------------+
+ *	| PPPoE_ID  |SMAC[47:32]|    | PPPoE_ID  |SMAC[47:32]|
+ *	+-----------+-----------+    +-----------+-----------+
+ *	|       SMAC[31:0]      |    |       SMAC[31:0]      | 
+ *	+-----------------------+    +-----------------------+
+ *	| Rev |  SNAP_Ctrl(3B)  |    | Rev |  SNAP_Ctrl(3B)  |
+ *	+-----------------------+    +-----------------------+
+ *	|    Rev    | VLAN2(2B) |    |   Rev     | VLAN2(2B) |
+ *	+-----------------------+    +-----------------------+
+ *	|     Rev(4B)           |    |       Rev(4B)         |
+ *	+-----------------------+    +-----------------------+
+ *	|     tmp_buf(4B)       |    |       tmp_buf(4B)     |
+ *	+-----------------------+    +-----------------------+
+ *
+ * Foe Entry (80)
+ *
+ *      IPV4 HNAPT:			     IPV4:
+ *	+-----------------------+    +-----------------------+
+ *	|  Information Block 1  |    |  Information Block 1  |
+ *	+-----------------------+    +-----------------------+
+ *	|	SIP(4B)		|    |		SIP(4B)      |
+ *	+-----------------------+    +-----------------------+
+ *	|	DIP(4B)		|    |		DIP(4B)      |
+ *	+-----------------------+    +-----------------------+
+ *	| SPORT(2B) | DPORT(2B) |    |	      Rev(4B)        |
+ *	+-----------+-----------+    +-----------------------+
+ *	| EG DSCP| Info Block 2 |    |	Information Block 2  | 
+ *	+-----------------------+    +-----------------------+
+ *	|      New SIP(4B)	|    |     New SIP (4B)      |
+ *	+-----------------------+    +-----------------------+
+ *	|      New DIP(4B)	|    |     New DIP (4B)      |
+ *	+-----------------------+    +-----------------------+
+ *	| New SPORT | New DPORT |    | New SPORT | New DPORT |
+ *	+-----------+-----------+    +-----------------------+
+ *	|          REV          |    |		REV	     |
+ *	+-----------------------+    +-----------------------+
+ *	|Act_dp|   REV          |    |Act_dp|	REV	     |
+ *	+-----------------------+    +-----------------------+
+ *	|      tmp_buf(4B)      |    |	     temp_buf(4B)    | 
+ *	+-----------------------+    +-----------|-----------+
+ *	| ETYPE     | VLAN1 ID  |    | ETYPE     |  VLAN1    |
+ *	+-----------+-----------+    +-----------+-----------+
+ *	|       DMAC[47:16]     |    |       SMAC[47:16]     | 
+ *	+-----------------------+    +-----------------------+
+ *	| DMAC[15:0]| VLAN2 ID  |    | DMAC[15:0]|  VLAN2    |
+ *	+-----------------------+    +-----------------------+
+ *	|       SMAC[47:16]     |    |       SMAC[47:16]     | 
+ *	+-----------------------+    +-----------------------+
+ *	| SMAC[15:0]| PPPOE ID  |    | SMAC[15:0]| PPPOE ID  |
+ *	+-----------------------+    +-----------------------+
+ *
+ */
+#if defined (CONFIG_HNAT_V2)
+struct _ipv4_hnapt {
+	union {
+		struct ud_info_blk1 udib1;
+		struct bf_info_blk1 bfib1;
+		uint32_t info_blk1;
+	};
+	uint32_t sip;
+	uint32_t dip;
+	uint16_t dport;
+	uint16_t sport;
+	union {
+		struct _info_blk2 iblk2;
+		uint32_t info_blk2;
+	};
+	uint32_t new_sip;
+	uint32_t new_dip;
+	uint16_t new_dport;
+	uint16_t new_sport;
+	uint32_t resv1;
+	uint32_t resv2;
+	uint32_t resv3:26;
+	uint32_t act_dp:6;	/* UDF */
+	uint16_t vlan1;
+	uint16_t etype;
+	uint8_t dmac_hi[4];
+	uint16_t vlan2;
+	uint8_t dmac_lo[2];
+	uint8_t smac_hi[4];
+	uint16_t pppoe_id;
+	uint8_t smac_lo[2];
+};
+
+struct _ipv4_dslite {
+	union {
+		struct ud_info_blk1 udib1;
+		struct bf_info_blk1 bfib1;
+		uint32_t info_blk1;
+	};
+	uint32_t sip;
+	uint32_t dip;
+	uint16_t dport;
+	uint16_t sport;
+
+	uint32_t tunnel_sipv6_0;
+	uint32_t tunnel_sipv6_1;
+	uint32_t tunnel_sipv6_2;
+	uint32_t tunnel_sipv6_3;
+
+	uint32_t tunnel_dipv6_0;
+	uint32_t tunnel_dipv6_1;
+	uint32_t tunnel_dipv6_2;
+	uint32_t tunnel_dipv6_3;
+
+	uint8_t flow_lbl[3];	/* in order to consist with Linux kernel (should be 20bits) */
+	uint16_t priority:4;	/* in order to consist with Linux kernel (should be 8bits) */
+	uint16_t resv:4;
+	uint32_t hop_limit:8;
+	uint32_t resv2:18;
+	uint32_t act_dp:6;	/* UDF */
+	
+	union {
+		struct _info_blk2 iblk2;
+		uint32_t info_blk2;
+	};
+
+	uint16_t vlan1;
+	uint16_t etype;
+	uint8_t dmac_hi[4];
+	uint16_t vlan2;
+	uint8_t dmac_lo[2];
+	uint8_t smac_hi[4];
+	uint16_t pppoe_id;
+	uint8_t smac_lo[2];
+};
+
+
+struct _ipv6_1t_route {
+	union {
+		struct ud_info_blk1 udib1;
+		struct bf_info_blk1 bfib1;
+		uint32_t info_blk1;
+	};
+	uint32_t ipv6_dip0;
+	uint32_t ipv6_dip1;
+	uint32_t resv;
+
+	union {
+		struct _info_blk2 iblk2;
+		uint32_t info_blk2;
+	};
+
+	uint32_t ipv6_dip2;
+	uint32_t ipv6_dip3;
+	uint32_t resv1;
+
+	uint32_t act_dp:6;	/* UDF */
+	uint16_t vlan1;
+	uint16_t etype;
+	uint8_t dmac_hi[4];
+	uint16_t vlan2;
+	uint8_t dmac_lo[2];
+	uint8_t smac_hi[4];
+	uint16_t pppoe_id;
+	uint8_t smac_lo[2];
+};
+
+struct _ipv6_3t_route {
+	union {
+		struct ud_info_blk1 udib1;
+		struct bf_info_blk1 bfib1;
+		uint32_t info_blk1;
+	};
+	uint32_t ipv6_sip0;
+	uint32_t ipv6_sip1;
+	uint32_t ipv6_sip2;
+	uint32_t ipv6_sip3;
+	uint32_t ipv6_dip0;
+	uint32_t ipv6_dip1;
+	uint32_t ipv6_dip2;
+	uint32_t ipv6_dip3;
+	uint32_t prot:8;
+	uint32_t resv:24;
+	
+	uint32_t resv1;
+	uint32_t resv2;
+	uint32_t resv3;
+	uint32_t resv4:26;
+	uint32_t act_dp:6;	/* UDF */
+
+	union {
+		struct _info_blk2 iblk2;
+		uint32_t info_blk2;
+	};
+	uint16_t vlan1;
+	uint16_t etype;
+	uint8_t dmac_hi[4];
+	uint16_t vlan2;
+	uint8_t dmac_lo[2];
+	uint8_t smac_hi[4];
+	uint16_t pppoe_id;
+	uint8_t smac_lo[2];
+};
+struct _ipv6_5t_route {
+	union {
+		struct ud_info_blk1 udib1;
+		struct bf_info_blk1 bfib1;
+		uint32_t info_blk1;
+	};
+	uint32_t ipv6_sip0;
+	uint32_t ipv6_sip1;
+	uint32_t ipv6_sip2;
+	uint32_t ipv6_sip3;
+	uint32_t ipv6_dip0;
+	uint32_t ipv6_dip1;
+	uint32_t ipv6_dip2;
+	uint32_t ipv6_dip3;
+	uint16_t dport;
+	uint16_t sport;
+	
+	uint32_t resv1;
+	uint32_t resv2;
+	uint32_t resv3;
+	uint32_t resv4:26;
+	uint32_t act_dp:6;	/* UDF */
+
+	union {
+		struct _info_blk2 iblk2;
+		uint32_t info_blk2;
+	};
+	
+	uint16_t vlan1;
+	uint16_t etype;
+	uint8_t dmac_hi[4];
+	uint16_t vlan2;
+	uint8_t dmac_lo[2];
+	uint8_t smac_hi[4];
+	uint16_t pppoe_id;
+	uint8_t smac_lo[2];
+};
+
+struct _ipv6_6rd {
+	union {
+		struct ud_info_blk1 udib1;
+		struct bf_info_blk1 bfib1;
+		uint32_t info_blk1;
+	};
+	uint32_t ipv6_sip0;
+	uint32_t ipv6_sip1;
+	uint32_t ipv6_sip2;
+	uint32_t ipv6_sip3;
+	uint32_t ipv6_dip0;
+	uint32_t ipv6_dip1;
+	uint32_t ipv6_dip2;
+	uint32_t ipv6_dip3;
+	uint16_t dport;
+	uint16_t sport;
+
+	uint32_t tunnel_sipv4;
+	uint32_t tunnel_dipv4;
+	uint32_t hdr_chksum:16;
+	uint32_t dscp:8;
+	uint32_t ttl:8;
+	uint32_t flag:3;
+	uint32_t resv1:23;
+	uint32_t act_dp:6;	/* UDF */
+
+	union {
+		struct _info_blk2 iblk2;
+		uint32_t info_blk2;
+	};
+
+	uint16_t vlan1;
+	uint16_t etype;
+	uint8_t dmac_hi[4];
+	uint16_t vlan2;
+	uint8_t dmac_lo[2];
+	uint8_t smac_hi[4];
+	uint16_t pppoe_id;
+	uint8_t smac_lo[2];
+
+
+};
+
+struct FoeEntry {
+	union {
+		struct ud_info_blk1 udib1;
+		struct bf_info_blk1 bfib1;	//common header
+		struct _ipv4_hnapt ipv4_hnapt;	// nat & napt share same data structure
+#if defined (CONFIG_RA_HW_NAT_IPV6)
+		struct _ipv4_dslite ipv4_dslite;
+		struct _ipv6_1t_route ipv6_1t_route;
+		struct _ipv6_3t_route ipv6_3t_route;
+		struct _ipv6_5t_route ipv6_5t_route;
+		struct _ipv6_6rd ipv6_6rd;
+#endif
+	};
+};
+
+struct FoePriKey {
+	/* TODO: add new primary key to support dslite, 6rd */
+
+	/* Ipv4 */
+	struct {
+		uint32_t sip;
+		uint32_t dip;
+		uint16_t sport;
+		uint16_t dport;
+		uint32_t is_udp:1;
+	} ipv4_hnapt;
+
+	struct {
+		uint32_t sip;
+		uint32_t dip;
+		/* TODO */
+	} ipv4_hnat;
+
+	struct {
+		uint32_t sip;
+		uint32_t dip;
+		/* TODO */
+	} ipv4_dslite;
+
+	/* IPv6 */
+	struct {
+		uint32_t dip0;
+		uint32_t dip1;
+		uint32_t dip2;
+		uint32_t dip3;
+	} ipv6_routing;
+
+	struct {
+		/* TODO */
+	} ipv6_6rd;
+
+	uint32_t pkt_type;	/* entry format */
+};
+
+#else
+struct _ipv4_hnapt {
+	union {
+		struct ud_info_blk1 udib1;
+		struct bf_info_blk1 bfib1;
+		uint32_t info_blk1;
+	};
+	uint32_t sip;
+	uint32_t dip;
+	uint16_t dport;
+	uint16_t sport;
+
+	union {
+		struct _info_blk2 iblk2;
+		uint32_t info_blk2;
+	};
+
+	uint32_t new_sip;
+	uint32_t new_dip;
+	uint16_t new_dport;
+	uint16_t new_sport;
+
+	uint8_t dmac_hi[2];
+	uint16_t vlan1;
+	uint8_t dmac_lo[4];
+	uint8_t smac_hi[2];
+	uint16_t pppoe_id;
+	uint8_t smac_lo[4];
+
+	uint8_t snap_ctrl[3];
+	uint8_t act_dp:6;	/* UDF */
+	uint8_t resv1:2;
+	uint16_t vlan2;
+	uint16_t resv2;
+	uint32_t resv3;
+	uint32_t resv4;
+};
+
+struct _ipv6_1t_route {
+	union {
+		struct ud_info_blk1 udib1;
+		struct bf_info_blk1 bfib1;
+		uint32_t info_blk1;
+	};
+	uint32_t ipv6_dip0;
+	uint32_t ipv6_dip1;
+	uint32_t resv;
+
+	union {
+		struct _info_blk2 iblk2;
+		uint32_t info_blk2;
+	};
+
+	uint32_t ipv6_dip2;
+	uint32_t ipv6_dip3;
+	uint32_t resv1;
+
+	uint32_t act_dp:6;	/* UDF */
+	uint16_t vlan1;
+	uint16_t etype;
+	uint8_t dmac_hi[4];
+	uint16_t vlan2;
+	uint8_t dmac_lo[2];
+	uint8_t smac_hi[4];
+	uint16_t pppoe_id;
+	uint8_t smac_lo[2];
+};
+
+struct FoeEntry {
+	union {
+		struct bf_info_blk1 bfib1;	//common header
+		struct _ipv4_hnapt ipv4_hnapt;	// nat & napt share same data structure
+		struct _ipv6_1t_route ipv6_1t_route;
+	};
+};
+
+struct FoePriKey {
+	/* Ipv4 */
+	struct {
+		uint32_t sip;
+		uint32_t dip;
+		uint16_t sport;
+		uint16_t dport;
+		uint32_t is_udp:1;
+	} ipv4;
+
+	/* IPv6 */
+	struct {
+		uint32_t dip0;
+		uint32_t dip1;
+		uint32_t dip2;
+		uint32_t dip3;
+	} ipv6;
+
+	uint32_t pkt_type;	/* entry format */
+};
+#endif
+
+int32_t FoeHashFun(struct FoePriKey *key, enum FoeEntryState TargetState);
+uint32_t FoeInsEntry(struct FoeEntry *entry);
+void FoeSetMacHiInfo(uint8_t * dst, uint8_t * src);
+void FoeSetMacLoInfo(uint8_t * dst, uint8_t * src);
+void FoeDumpEntry(uint32_t Index);
+int FoeGetAllEntries(struct hwnat_args *opt);
+int FoeBindEntry(struct hwnat_args *opt);
+int FoeUnBindEntry(struct hwnat_args *opt);
+int FoeDelEntryByNum(uint32_t entry_num);
+void FoeTblClean(void);
+int FoeDumpCacheEntry(void);
+
+#endif
--- /dev/null
+++ b/include/net/nat/hw_nat/hwnat_ioctl.h
@@ -0,0 +1,217 @@
+/*
+    Module Name:
+    hwnat_ioctl.h
+
+    Abstract:
+
+    Revision History:
+    Who         When            What
+    --------    ----------      ----------------------------------------------
+    Name        Date            Modification logs
+    Steven Liu  2006-10-06      Initial version
+*/
+
+#ifndef	__HW_NAT_IOCTL_H__
+#define	__HW_NAT_IOCTL_H__
+
+#define HW_NAT_DUMP_CACHE_ENTRY    	(0x02)
+#define HW_NAT_DUMP_ENTRY    		(0x03)
+#define HW_NAT_GET_ALL_ENTRIES 		(0x04)
+#define HW_NAT_BIND_ENTRY		(0x05)
+#define HW_NAT_UNBIND_ENTRY		(0x06)
+#define HW_NAT_INVALID_ENTRY		(0x07)
+#define HW_NAT_DEBUG	   		(0x08)
+
+/*HNAT QOS*/
+#if defined (CONFIG_HNAT_V2)
+#define HW_NAT_GET_AC_CNT		(0x09)
+#else
+#define HW_NAT_DSCP_REMARK		(0x09)
+#define HW_NAT_VPRI_REMARK		(0x0a)
+#define HW_NAT_FOE_WEIGHT		(0x0b)
+#define HW_NAT_ACL_WEIGHT		(0x0c)
+#define HW_NAT_DSCP_WEIGHT		(0x0d)
+#define HW_NAT_VPRI_WEIGHT		(0x0e)
+#define HW_NAT_DSCP_UP			(0x0f)
+#define HW_NAT_UP_IDSCP			(0x10)
+#define HW_NAT_UP_ODSCP			(0x11)
+#define HW_NAT_UP_VPRI			(0x12)
+#define HW_NAT_UP_AC			(0x13)
+#define HW_NAT_SCH_MODE			(0x14)
+#define HW_NAT_SCH_WEIGHT		(0x15)
+#endif
+#define HW_NAT_BIND_THRESHOLD		(0x16)
+#define HW_NAT_MAX_ENTRY_LMT		(0x17)
+#define HW_NAT_RULE_SIZE		(0x18)
+#define HW_NAT_KA_INTERVAL		(0x19)
+#define HW_NAT_UB_LIFETIME		(0x1A)
+#define HW_NAT_BIND_LIFETIME		(0x1B)
+#define HW_NAT_BIND_DIRECTION		(0x1C)
+#define HW_NAT_VLAN_ID			(0x1D)
+
+#if defined (CONFIG_PPE_MCAST)
+#define HW_NAT_MCAST_INS		(0x20)
+#define HW_NAT_MCAST_DEL		(0x21)
+#define HW_NAT_MCAST_DUMP		(0x22)
+#endif
+
+#define HW_NAT_DEVNAME			"hwnat0"
+#define HW_NAT_MAJOR			(220)
+
+enum hwnat_status {
+	HWNAT_SUCCESS = 0,
+	HWNAT_FAIL = 1,
+	HWNAT_ENTRY_NOT_FOUND = 2
+};
+
+struct hwnat_tuple {
+	unsigned short hash_index;
+	unsigned char pkt_type;
+
+	/* egress layer2 */
+	unsigned char dmac[6];
+	unsigned char smac[6];
+	unsigned short vlan1;
+	unsigned short vlan2;
+	unsigned short pppoe_id;
+
+	/* ingress layer3 */
+	unsigned int ing_sipv4;
+	unsigned int ing_dipv4;
+
+	unsigned int ing_sipv6_0;
+	unsigned int ing_sipv6_1;
+	unsigned int ing_sipv6_2;
+	unsigned int ing_sipv6_3;
+
+	unsigned int ing_dipv6_0;
+	unsigned int ing_dipv6_1;
+	unsigned int ing_dipv6_2;
+	unsigned int ing_dipv6_3;
+
+	/* egress layer3 */
+	unsigned int eg_sipv4;
+	unsigned int eg_dipv4;
+
+	unsigned int eg_sipv6_0;
+	unsigned int eg_sipv6_1;
+	unsigned int eg_sipv6_2;
+	unsigned int eg_sipv6_3;
+
+	unsigned int eg_dipv6_0;
+	unsigned int eg_dipv6_1;
+	unsigned int eg_dipv6_2;
+	unsigned int eg_dipv6_3;
+
+	unsigned char prot;
+
+	// ingress layer4
+	unsigned short ing_sp;
+	unsigned short ing_dp;
+
+	// egress layer4
+	unsigned short eg_sp;
+	unsigned short eg_dp;
+
+	unsigned char	ipv6_flowlabel;
+	enum hwnat_status result;
+};
+
+struct hwnat_args {
+	unsigned int debug:3;
+	unsigned int entry_state:2;	/* invalid=0, unbind=1, bind=2, fin=3 */
+	enum hwnat_status result;
+	unsigned int entry_num:16;
+	unsigned int num_of_entries:16;
+	struct hwnat_tuple entries[0];
+};
+
+/*hnat qos*/
+struct hwnat_qos_args {
+	unsigned int enable:1;
+	unsigned int up:3;
+	unsigned int weight:3;	/*UP resolution */
+	unsigned int dscp:6;
+	unsigned int dscp_set:3;
+	unsigned int vpri:3;
+	unsigned int ac:2;
+	unsigned int mode:2;
+	unsigned int weight0:4;	/*WRR 4 queue weight */
+	unsigned int weight1:4;
+	unsigned int weight2:4;
+	unsigned int weight3:4;
+	enum hwnat_status result;
+};
+
+/*hnat config*/
+struct hwnat_config_args {
+	unsigned int bind_threshold:16;
+	unsigned int foe_full_lmt:14;
+	unsigned int foe_half_lmt:14;
+	unsigned int foe_qut_lmt:14;
+	unsigned int pre_acl:9;
+	unsigned int pre_meter:9;
+	unsigned int pre_ac:9;
+	unsigned int post_meter:9;
+	unsigned int post_ac:9;
+	unsigned int foe_tcp_ka:8;	/*unit 4 sec */
+	unsigned int foe_udp_ka:8;	/*unit 4 sec */
+	unsigned int foe_unb_dlta:8;	/*unit 1 sec */
+	unsigned int foe_tcp_dlta:16;	/*unit 1 sec */
+	unsigned int foe_udp_dlta:16;	/*unit 1 sec */
+	unsigned int foe_fin_dlta:16;	/*unit 1 sec */
+	unsigned int wan_vid:16;
+	unsigned int lan_vid:16;
+	unsigned int bind_dir:2;	/* 0=upstream, 1=downstream, 2=bi-direction */
+	enum hwnat_status result;
+};
+
+#if defined (CONFIG_HNAT_V2)
+struct hwnat_ac_args {
+	unsigned char ag_index;
+	unsigned long long ag_byte_cnt;
+	unsigned long long ag_pkt_cnt;
+	enum hwnat_status result;
+};
+#endif
+
+#if defined (CONFIG_PPE_MCAST)
+struct hwnat_mcast_args {
+	unsigned int    mc_vid:16;
+	unsigned int    mc_px_en:4;
+	unsigned int    valid:1;
+	unsigned int    rev2:3;
+	unsigned int    mc_px_qos_en:4;
+	unsigned int    mc_qos_qid:4;
+	unsigned char	dst_mac[6];
+};
+#endif
+
+
+int PpeRegIoctlHandler(void);
+void PpeUnRegIoctlHandler(void);
+#if defined (CONFIG_HNAT_V2)
+int32_t PpeGetAGCnt(struct hwnat_ac_args *opt3);
+#else
+int PpeSetDscpRemarkEbl(unsigned int enable);
+int PpeSetVpriRemarkEbl(unsigned int enable);
+int PpeSetWeightFOE(unsigned int weight);
+int PpeSetWeightACL(unsigned int weight);
+int PpeSetWeightDSCP(unsigned int weight);
+int PpeSetWeightVPRI(unsigned int weight);
+int PpeSetDSCP_UP(unsigned int DSCP_SET, unsigned char UP);
+int PpeSetUP_IDSCP(unsigned int UP, unsigned int IDSCP);
+int PpeSetUP_ODSCP(unsigned int UP, unsigned int ODSCP);
+int PpeSetUP_VPRI(unsigned int UP, unsigned int VPRI);
+int PpeSetUP_AC(unsigned int UP, unsigned int AC);
+int PpeSetSchMode(unsigned int policy);
+int PpeSetSchWeight(unsigned char W0, unsigned char W1, unsigned char W2, unsigned char W3);
+void PpeRstPreAclPtr(void);
+void PpeRstPreAcPtr(void);
+void PpeRstPostAcPtr(void);
+void PpeRstPreMtrPtr(void);
+void PpeRstPostMtrPtr(void);
+
+#endif
+
+#endif
